import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import {
  Input,
  Spacer,
  Grid,
  Button,
  Tooltip,
  Popover,
  Text,
} from "@nextui-org/react";
import Head from "next/head";

// firebase
import { getAuth } from "firebase/auth";
import firebaseApp from "@/firebaseconfig";
const auth = getAuth(firebaseApp);

// css stuff
const css = require("./styles.module.css");

// utils
import validateEmail from "../../utils/check_email";

type InputColor =
  | "default"
  | "primary"
  | "secondary"
  | "success"
  | "warning"
  | "error";

// requests to firebase
import register from "../api/auth/firebase/auth_register";
import updateUserProfile from "../api/auth/firebase/update_profile";

// internal auth stuff

export default function Register() {
  //hooks
  const router = useRouter();

  // data
  const [username, setUsername] = useState("");
  const [mail, setMail] = useState("");
  const [password, setPassword] = useState("");

  //------------- component handling

  const [isDisabled, setIsDisabled] = useState(true);

  // colors
  const [usernameInputColor, setUsernameInputColor] =
    useState<InputColor>("error");
  const [mailInputColor, setMailInputColor] = useState<InputColor>("error");
  const [passwordInputColor, setPasswordInputColor] =
    useState<InputColor>("error");

  const [usernameTooltipText, setUsernameTooltipText] = useState(
    "Username must not be empty"
  );
  const [mailTooltipText, setMailTooltipText] = useState("Email not valid");
  const [passwordTooltipText, setPasswordTooltipText] =
    useState("Password not valid");

  // disable tooltips
  const [usernameTooltipDisabled, setUsernamelTooltipDisabled] =
    useState(false);
  const [mailTooltipDisabled, setMailTooltipDisabled] = useState(false);
  const [passwordTooltipDisabled, setPasswordTooltipDisabled] = useState(false);
  const [userErrorDisabled, setUserErrorDisabled] = useState(true);

  // components useEffect
  useEffect(() => {
    if (username) {
      setUsernameInputColor("success");
      setUsernamelTooltipDisabled(true);
    } else {
      setUsernameInputColor("error");
      setUsernameTooltipText("Username must not be empty");
      setUsernamelTooltipDisabled(false);
    }
  }, [username]);

  // states colors & text
  useEffect(() => {
    if (validateEmail(mail)) {
      setMailInputColor("success");
      setMailTooltipDisabled(true);
    } else {
      setMailInputColor("error");
      setMailTooltipText("Email not valid");
      setMailTooltipDisabled(false);
    }
  }, [mail]);

  useEffect(() => {
    if (password.length > 5) {
      setPasswordInputColor("success");
      setPasswordTooltipDisabled(true);
    } else {
      setPasswordInputColor("error");
      setPasswordTooltipText("Password not valid");
      setPasswordTooltipDisabled(false);
    }
  }, [password]);

  // component enabled
  useEffect(() => {
    if (validateEmail(mail) && password.length > 5 && username) {
      setIsDisabled(false);
      setUserErrorDisabled(true);
    } else {
      setIsDisabled(true);
    }
  }, [mail, password]);

  // --------------------- FIRST LOAD
  useEffect(() => {
    (async () => {
      getAuth(firebaseApp).onAuthStateChanged(function (user) {
        if (user) {
          router.push("/chat");
        }
      });
    })();
  }, []);

  // Handleclick
  async function handleClick(mail: string, password: string) {
    if (username && mail && password) {
      const request = await register(mail, password);
      if (request) {
        updateUserProfile(username, null);
        router.push("/chat");
      } else {
        setUserErrorDisabled(false);
      }
    }
  }

  return (
    <>
      <Head>
        <title>Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={css.body}>
        <h1>Register</h1>
        <Grid.Container gap={3} justify="center">
          <Grid>
            <Tooltip
              content={usernameTooltipText}
              trigger="hover"
              color={usernameInputColor}
              isDisabled={usernameTooltipDisabled}
            >
              <Input
                color={usernameInputColor}
                labelPlaceholder="Username"
                width="250px"
                clearable
                underlined
                onChange={(e) => {
                  setUsername(e.target.value);
                }}
              />
            </Tooltip>
          </Grid>
          <Grid>
            <Tooltip
              content={mailTooltipText}
              trigger="hover"
              color={mailInputColor}
              isDisabled={mailTooltipDisabled}
            >
              <Input
                color={mailInputColor}
                labelPlaceholder="Mail"
                width="250px"
                clearable
                underlined
                onChange={(e) => {
                  setMail(e.target.value);
                }}
              />
            </Tooltip>
          </Grid>
          <Grid>
            <Tooltip
              content={passwordTooltipText}
              trigger="hover"
              color={passwordInputColor}
              isDisabled={passwordTooltipDisabled}
            >
              <Input.Password
                color={passwordInputColor}
                labelPlaceholder="Password"
                width="250px"
                clearable
                underlined
                onChange={(e) => {
                  setPassword(e.target.value);
                }}
              />
            </Tooltip>
          </Grid>
        </Grid.Container>
        <Spacer y={0.25} />
        <Tooltip
          color="error"
          content="Email is already taken."
          placement="bottom"
          isDisabled={userErrorDisabled}
        >
          <Button
            color="gradient"
            onPress={() => {
              handleClick(mail, password);
            }}
            disabled={isDisabled}
          >
            Register
          </Button>
        </Tooltip>
        <Spacer y={0.5} />
        <p>
          Already have an account? <a href="/login">Login</a>
        </p>
      </main>
    </>
  );
}
