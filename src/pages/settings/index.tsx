import { Input, Spacer, Button, Grid } from "@nextui-org/react";
import Head from "next/head";
import { Camera } from "react-iconly";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";

// uuid
const { v4: uuidv4 } = require("uuid");

// firebase
import { getAuth } from "firebase/auth";
import { getDownloadURL, getStorage, ref, uploadBytes } from "firebase/storage";
import updateUserProfile from "../api/auth/firebase/update_profile";
import firebaseApp from "@/firebaseconfig";

// css stuff
const css = require("./styles.module.css");

//firebase stuff
const storage = getStorage(firebaseApp);

// api
import getCurrentUser from "../api/auth/firebase/get_current_user";

// components
import UserPreview from "@/components/userPreviewSettings";
import GoBackButton from "@/components/Buttons/GoBackButton/GobackButton";

export default function Settings() {
  const [username, setUsername] = useState("");
  const [pfpUrl, setPfpUrl] = useState("");

  //  pfp blob
  let pfpBlob;

  const router = useRouter();

  let inputElement: HTMLInputElement;
  if (typeof document !== "undefined") {
    inputElement = document.getElementById("imgUpload") as HTMLInputElement;
  }

  // callable functions

  function handlePfp() {
    inputElement.click();
  }

  const handleSubmit = () => {
    let regex = new RegExp("firebase");
    // img handling
    const imgUid = uuidv4();
    const pfpRef = ref(storage, "pfp/" + imgUid);
    if (inputElement.files?.length === 1 && pfpUrl != "") {
      console.log(pfpUrl);
      uploadBytes(pfpRef, inputElement.files[0]).then((snapshot) => {
        console.log("Uploaded a blob or file!");
        getDownloadURL(ref(storage, "pfp/" + imgUid)).then((url) => {
          updateUserProfile(username, url);
        });
      });
    } else {
      // profile handling
      if (!String(pfpUrl).toLocaleLowerCase().match(regex)) {
        // profile handling
        console.log(regex);
        updateUserProfile(username, pfpUrl);
        console.log("updated without changing pfp!");
        return;
      } else {
        console.log(pfpUrl);
        updateUserProfile(username, null);
        console.log("updated without pfp!");
        return;
      }
    }
  };

  // --- useEffects
  function resetPhoto() {
    setPfpUrl("");
    console.log(pfpUrl);
  }

  // ------------- FIRST LOAD
  useEffect(() => {
    (async () => {
      getAuth(firebaseApp).onAuthStateChanged(function (user) {
        if (user) {
          const loggedUser = getCurrentUser(user);
          if (loggedUser.displayName) {
            setUsername(loggedUser.displayName);
          }
          if (loggedUser.photoURL) {
            setPfpUrl(loggedUser.photoURL);
          } else {
            setPfpUrl("");
          }
        } else {
          router.push("/login");
        }
      });
    })();

    document
      .getElementById("imgUpload")
      ?.addEventListener("change", function (e) {
        if (inputElement.files?.length === 1) {
          pfpBlob = URL.createObjectURL(inputElement.files[0]);
          setPfpUrl(pfpBlob);
        }
      });
  }, []);

  return (
    <>
      <Head>
        <title>Settings</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={css.body}>
        <h1>Settings</h1>
        <div className={css.contentContainer}>
          <div>
            <Spacer y={1} />
            <div className={css.usernameContainer}>
              <Input
                labelPlaceholder="Username"
                width="140px"
                value={username}
                onChange={(e) => {
                  setUsername(e.target.value);
                }}
              />
              <input
                type="file"
                id="imgUpload"
                className={css.fileSelector}
                accept="image/png, image/gif, image/jpeg"
              />
              <Button
                auto
                icon={<Camera set="curved" primaryColor="white" />}
                onPress={() => handlePfp()}
              />
            </div>

            <Spacer y={0.7} />
            <Button size="md">Change Password</Button>
            <Spacer y={0.7} />
            <Button
              size="md"
              onPress={() => {
                handleSubmit();
              }}
            >
              Save Changes
            </Button>
            <Spacer y={0.7} />
          </div>
          <UserPreview
            username={username}
            imgUrl={pfpUrl}
            callback={() => {
              resetPhoto();
            }}
          />
        </div>
        <p>
          Found a bug?{" "}
          <a href="https://github.com/Rurucchi/nextchat/issues" target="_blank">
            Open an issue
          </a>
        </p>
        <GoBackButton />
      </main>
    </>
  );
}
