import { useEffect, useState } from "react";
import { Input } from "@nextui-org/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { getAuth } from "firebase/auth";

// css stuff
const css = require("./styles.module.css");

// components
import Message from "@/components/Chat/Message/Message";
import SettingsButton from "@/components/Buttons/SettingsButton/SettingsButton";
import { SendButton } from "@/components/Buttons/SendButton/SendButton";
import { Send } from "react-iconly";

// firebase shit
import firebaseApp from "@/firebaseconfig";
import getCurrentUser from "../api/auth/firebase/get_current_user";
import LogoutButton from "@/components/Buttons/LogoutButton/LogoutButton";
import sendMessage from "../api/firestore/sendMessage";
import getMessageHistory from "../api/firestore/getMessages";

import {
  collection,
  query,
  orderBy,
  onSnapshot,
  limit,
  getFirestore,
} from "firebase/firestore";

const auth = getAuth(firebaseApp);
const db = getFirestore(firebaseApp);

//types
interface messageType {
  user: string;
  content: string;
  time: number;
}

// let lastMessage: messageType;

export default function Chat() {
  const router = useRouter();

  //states
  const [input, setInput] = useState("");
  // const [isLoaded, setIsLoaded] = useState(false);

  //top level variables
  const [messageHistory, setMessageHistory] = useState<any[]>([]);
  const [lastMessage, setLastMessage] = useState();

  // scroll handling

  useEffect(() => {
    if (typeof window !== "undefined") {
      const scroller = document.getElementById("chat");
      if (scroller) {
        scroller.scrollTo({
          left: 0,
          top: scroller.scrollHeight,
          behavior: "smooth",
        });
      }
    }
  }, [messageHistory]);

  // onload
  useEffect(() => {
    (async () => {
      getAuth(firebaseApp).onAuthStateChanged(function (user) {
        if (user) {
          const loggedUser = getCurrentUser(user);
          console.log(loggedUser);
        } else {
          router.push("/login");
        }
      });
    })();
  }, []);

  // --------------------------------------- DATA

  // get stored data

  useEffect(() => {
    (async () => {
      let prevMessages = await getMessageHistory();
      setMessageHistory(prevMessages);
    })();
  }, []);

  useEffect(() => {
    console.log(messageHistory.length);
  }, [messageHistory]);

  useEffect(() => {
    const q = query(collection(db, "chat"), orderBy("time", "desc"), limit(1));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      querySnapshot.forEach((doc: any) => {
        setLastMessage(doc.data());
      });
    });
  }, []);

  useEffect(() => {
    setMessageHistory([...messageHistory, lastMessage]);
    window.scrollBy(0, 1);
  }, [lastMessage]);

  async function uploadMessage(content: string) {
    if (content != "" || content != null || content != undefined) {
      try {
        let time = Date.now();
        getAuth(firebaseApp).onAuthStateChanged(async function (user) {
          if (user?.displayName && user.email) {
            await sendMessage(
              user.email,
              user.displayName,
              user.photoURL,
              content,
              time
            );
            return true;
          } else {
            return false;
          }
        });
      } catch (error) {
        console.error(error);
        return false;
      }
    }
  }

  // -------------------------------- COMPONENT HANDLING

  return (
    <>
      <Head>
        <title>Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={css.body}>
        <SettingsButton />
        <LogoutButton />
        <div className={css.chatContainer}>
          <div className={css.chatContentContainer} id="chat">
            {messageHistory.length > 1 &&
              messageHistory.map((item) => (
                <Message
                  username={item.displayName}
                  content={item.content}
                  date={item.time}
                  imgUrl={item.pfpUrl}
                />
              ))}
          </div>
          <div className={css.userInputContainer}>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                uploadMessage(input);
                setInput("");
              }}
            >
              <Input
                clearable
                contentRightStyling={false}
                labelPlaceholder="Type your message..."
                contentRight={
                  <SendButton
                    onSubmit={() => {
                      uploadMessage(input);
                    }}
                  >
                    <Send />
                  </SendButton>
                }
                size="xl"
                fullWidth
                value={input}
                onChange={(e) => {
                  setInput(e.target.value);
                }}
                onSubmit={() => {
                  uploadMessage(input);
                }}
              />
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
