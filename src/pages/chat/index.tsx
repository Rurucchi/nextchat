import { useEffect, useState } from "react";
import { Input, Spacer } from "@nextui-org/react";
import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useRouter } from "next/router";
import { getAuth } from "firebase/auth";

// css stuff
const css = require("./styles.module.css");
const inter = Inter({ subsets: ["latin"] });

// components
import Message from "@/components/Chat/Message/Message";
import SettingsButton from "@/components/Buttons/SettingsButton/SettingsButton";
import { SendButton } from "@/components/Buttons/SendButton/SendButton";
import { Send } from "react-iconly";

// firebase shit
import firebaseApp from "@/firebaseconfig";
import getCurrentUser from "../api/auth/firebase/get_current_user";
import LogoutButton from "@/components/Buttons/LogoutButton/LogoutButton";
import sendMessage from "../api/firestore/sendMessage";
import getMessageHistory from "../api/firestore/getMessages";

import {
  collection,
  query,
  orderBy,
  onSnapshot,
  limit,
  getFirestore,
} from "firebase/firestore";

const auth = getAuth(firebaseApp);
const db = getFirestore(firebaseApp);

//types
interface messageType {
  user: string;
  content: string;
  time: number;
}

export default function Chat() {
  const router = useRouter();

  //states
  const [input, setInput] = useState("");

  //top level variables
  let messageHistory: messageType[] = [];

  // onload
  useEffect(() => {
    (async () => {
      getAuth(firebaseApp).onAuthStateChanged(function (user) {
        if (user) {
          const loggedUser = getCurrentUser(user);
          console.log(loggedUser);
        } else {
          router.push("/login");
        }
      });
    })();
  }, []);

  // --------------------------------------- DATA

  useEffect(() => {
    (async () => {
      await getMessageHistory().then((res) => {
        res.forEach((res) => {
          const message: messageType = { user: res.user };
          messageHistory.push();
        });
      });
    })();
  }, []);

  // useEffect(() => {
  //   console.log(messageHistory);
  // }, [messageHistory]);

  const q = query(collection(db, "chat"), orderBy("time"), limit(1));
  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    querySnapshot.forEach((doc) => {
      messageHistory.push(doc.data());
    });
  });

  async function uploadMessage(content: string) {
    try {
      let time = Date.now();
      getAuth(firebaseApp).onAuthStateChanged(async function (user) {
        if (user?.displayName) {
          await sendMessage(content, time, user.displayName);
          return true;
        } else {
          return false;
        }
      });
    } catch (error) {
      console.error(error);
      return false;
    }
  }

  // -------------------------------- COMPONENT HANDLING

  return (
    <>
      <Head>
        <title>Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={css.body}>
        <SettingsButton />
        <LogoutButton />
        <div className={css.chatContainer}>
          {messageHistory.map((item) => {
            return (
              <Message
                username={item.user}
                content={item.content}
                date={item.time}
                imgUrl={null}
              />
            );
          })}
          <div className={css.userInputContainer}>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                uploadMessage(input);
                setInput("");
              }}
            >
              <Input
                label={undefined}
                clearable
                contentRightStyling={false}
                placeholder="Type your message..."
                contentRight={
                  <SendButton
                    onSubmit={() => {
                      uploadMessage(input);
                    }}
                  >
                    <Send />
                  </SendButton>
                }
                size="xl"
                fullWidth
                value={input}
                onChange={(e) => {
                  setInput(e.target.value);
                }}
                onSubmit={() => {
                  uploadMessage(input);
                }}
              />
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
